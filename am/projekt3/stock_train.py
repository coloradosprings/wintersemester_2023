# -*- coding: utf-8 -*-
"""Kopie von get_data_train.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wBD7b10ln4GtrBjwUEV6Om-Upb4Hl-V6
"""

#!pip install yahoo_fin

from yahoo_fin.stock_info import get_data
import tensorflow as tf
import datetime as dt
import dt.datetime as dt.calender
import pandas as pd
import numpy as np
import re


#DPW.DE	Deutsche Post AG	32.49	-0.62	-1.89%	3,442,021
#tickers = re.findall(fr'\w*\.DE\b',tickers_dax_raw)
tickers = ['P911.DE',

 'DTG.DE',
 'ADS.DE',
 'HEI.DE',
 'EOAN.DE',
 'AIR.DE',
 'CON.DE',
 '1COV.DE',
 'RWE.DE',
 'VOW3.DE',
 'BMW.DE',
 'DHL.DE',
 'IFX.DE',
 'BAS.DE',
 'BAYN.DE',
 'DBK.DE',
 'HNR1.DE',
 'BEI.DE',
 'ALV.DE',
 'MTX.DE',
 'DTE.DE',
 'SY1.DE',
 'SIE.DE',
 'DB1.DE',
 'FRE.DE',
 'VNA.DE',
 'MRK.DE',
 'SHL.DE',
 'ENR.DE',
 'ZAL.DE']

class GetData_DAX:
    def __init__(self,number):
        self.number = number
        dates = self.get_dt((number))
        self.data_x = self.collect_data_x(dates)
        self.data_y = self.collect_data_y(dates)

    def get_dt(self,number):
        days = []
        x = 1
        for k in range(0,number):
            weekday = (dt.calender.today().date() - dt.timedelta(days=x)).weekday()
            if weekday > 4:
                difference = 7 - weekday
                x += difference
                weekday = (dt.calender.today().date() - dt.timedelta(days=x)).weekday()
            if weekday <= 4:
                days.append(dt.calender.today().date() - dt.timedelta(days=x))
            x += 1
        return days

    def collect_data_x(self,dates):
        print(dates)
        data = []
        for i,day in enumerate(dates):
            print("x")
            print(f"index: {i}" )
            if i < (dates.__len__() - 1):
                day_data = []
                for ticker in tickers:
                    #print(ticker)
                    ticker_data = get_data(ticker, start_date = dates[i + 1],end_date=dates[i],
                                            index_as_date = True,interval = "1m").reset_index()[['open','high','low','close']]


                    columns = ticker_data.columns
                    for index, row in ticker_data.iterrows():
                        if index == 0:
                            previous = [row[column] for column in columns]
                        elif row.isna().any() == True:
                            for column in columns:
                                row[column] = 0
                        else:
                            current = [row[column] for column in columns]
                            for index,column in enumerate(columns):
                                row[column] = previous[index] - row[column]
                            previous = current
                    ticker_data.iloc[[0]] = 0
                    ticker_data = ticker_data.values
                    if ticker_data.shape[0] != 511:
                        for x in range(ticker_data.shape[0],511):
                            ticker_data = np.insert(ticker_data,1,[0,0,0,0],0)
                    day_data.append(ticker_data)
                    day_data.append(ticker_data)

                day_data = np.transpose(day_data,(1,0,2))
                print(day_data.shape)

                data_block = []
                for i in range(1,51):
                    start_point = (i - 1)*10
                    end_point = (i)*10
                    day_data_values = day_data[start_point:end_point]
                    if i == 50:
                        day_data_values[9] += day_data[510]
                        data_block.append(day_data_values)
                    else:
                        data_block.append(day_data_values)

                    # if i<=3:
                    #   print('o',data_block[0])
                data.append(np.asarray(data_block))
        data = np.asarray(data)
        data = np.reshape(data,[data.shape[0] * 2,250,60 ,4])
        #data = np.reshape(data,[data.shape[0],(50 * 10),(58 * 4)])
        print("last data_block unlabeled")
        return data

    def collect_data_y(self,dates):
            print("y")
            ticker = "^GDAXI"
            data = []
            for i,day in enumerate(dates):
                print(f"index: {i}")
                ticker = "^GDAXI"
                day_data = []
                max = (dates.__len__() - 1)
                if i < max:
                    ticker_data = get_data(ticker, start_date = dates[i + 1],end_date=dates[i],
                                            index_as_date = True,interval = "1m").reset_index()[['open','high','low','close']]


                    columns = ticker_data.columns
                    for index, row in ticker_data.iterrows():
                        if index == 0:
                            previous = [row[column] for column in columns]
                        elif row.isna().any() == True:
                            for column in columns:
                                row[column] = 0
                        else:
                            current = [row[column] for column in columns]
                            for index,column in enumerate(columns):
                                row[column] = previous[index] - row[column]
                            previous = current
                    ticker_data.iloc[[0]] = 0
                    ticker_data = ticker_data.values
                    if ticker_data.shape[0] != 511:
                        for x in range(ticker_data.shape[0],511):
                            ticker_data = np.insert(ticker_data,1,[0,0,0,0],0)
                    day_data = ticker_data.transpose()[0]
                    day_data_array = np.array(day_data)
                    # print(day_data.shape)
                    # print(type(day_data))


                    for i in [0,250]:
                      decrease = 0
                      increase = 0
                      for value in day_data[i: (i + 60) ]:
                        if value <= 0:
                          decrease += value
                        else:
                          increase += value


                      mean = (np.absolute(decrease) + increase)/2
                      diff = increase + decrease
                      if diff < 1/15 * mean:
                        data.append([1])
                      else:
                        data.append([0]) if np.absolute(decrease) > increase else data.append([2])

            #delete first entry no x value
            data = data[1:]
            return np.asarray(data)

    def binary_labels(self):
      data_y = self.data_y
      for index,y in enumerate(data_y):
        if y >= 0:
          data_y[index] = 1
        else:
          data_y[index] = -1
      return data_y